AntiDebuggers = cuando detectan que hay un debugger trabajando sobre ellos,  se cierran o comienzan a funcionar en forma diferente


IsDebuggerPresent = Api que detecta la ejecucion de un Debugger
esta api o función es exportada por la KERNEL32.dll
no tiene parámetros 
si el programa esta siendo debuggeado el retorno es un valor distinto de cero


PostQuitMessage = pasa un mensaje para cerrar la ventana
postea un mensaje WM_QUIT -- es una indicación de que esta cerrando cosas

ExitProcess  => cierra el proceso
*Para superar el IsDebuggerPresent en el crackme Crackme1.exe de la parte 19 - cambiar el salto y parchear

**En Olly existe plugin que pueda evitar la detección por medio de la api IsDebuggerPresent

TEB O TIB Muy importante la TIB podemos ver por ejemplo donde comienza y donde termina el stack del programa.
- 1)BUSCAR EL INICIO DEL TIB en la ventana de los registros del OLLYDBG
Ver el TIB en el dump (ya no esta en la misma posición si se arranca otra vez, siempre cambia)
le sumo 30 al inicio del TIB y hallo su contenido 

plugin para evitar el IsDebuggerPresent (HideDebbuger) en OLLYDBG


------------------------------------------------------------------------
Existe la posibilidad de detectar por nombre de proceso (como en la parte 20 del curso) 
al tildar en Debuggeing Options - Security - 
* Igrnoe path an extention
* Igrnore timestamp
* Ignore CRC of code section

los BPX en las apis se mantienen luego de reiniciarlo.
Puede que no siempre se vean las APIS cargadas desde el inicio. Pues las carga en tiempo de ejecucion.


EnumProcesses -> Recupera el identificador de proceso de cada objeto de proceso del sistema.
[out] lpidProcess

Puntero a una matriz que recibe la lista de identificadores de proceso.

[in] cb

Tamaño de la matriz pProcessIds , en bytes.

[out] lpcbNeeded

Número de bytes devueltos en la matriz pProcessIds .
Si la función se realiza correctamente, el valor devuelto es distinto de cero.
(nos devolverá el PROCESS IDENTIFIER o PID de cada proceso )


En el ejemplo: 
2D4 -> 02D4 - PERO EN L DUMP SE BUSCA COMO D4 02
2F4 -> 02F4 -> F4 02(virtual trabajo) por ejemplo - recordar que el pid cambia cada vez que se reinicia



----------------
el PID es un identificador genérico, en toda tu maquina, en cualquier proceso el PID del OLLYDBG será el mismo mientras no se reinicie, en mi caso será 2d4, ahora el handle, como su nombre lo indica es un manejador, o sea que es un numero que te devuelve el sistema para que tu programa pueda manejar ese proceso, y el numero puede variar para cada programa, es como una solicitud para controlarlo, si no la pedís no tendrás el numerito y no lo podrás controlar, si lo pedís el sistema te devolverá el manejador y lo podrás manejar

OpenProcess: devolverá el manejador del proceso que esta corriendo, en resumidas cuentas es lo que el programa quiere saber en este caso.
